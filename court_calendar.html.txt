<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-Time Court Schedule</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, onSnapshot, collection, query, setDoc, getDocs, deleteDoc, runTransaction, getDoc, orderBy } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        // --- IMPORTANT: EXTERNAL FIREBASE CONFIGURATION (For use outside of Canvas) ---
        // REPLACE THE FOLLOWING CONFIGURATION OBJECTS WITH YOUR ACTUAL FIREBASE PROJECT DETAILS.
        // DO NOT EDIT THE VARIABLES IF USING WITHIN THE CANVAS ENVIRONMENT.

        const FIREBASE_CONFIG_PLACEHOLDER = {
            // Paste your actual Firebase config object here if using this file externally.
            // Example: apiKey: "AIza...", projectId: "my-project-123", etc.
        };

        const INITIAL_AUTH_TOKEN_PLACEHOLDER = null;

        // --- Firebase/Canvas Setup ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : FIREBASE_CONFIG_PLACEHOLDER;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : INITIAL_AUTH_TOKEN_PLACEHOLDER;
        
        setLogLevel('Debug');

        let db;
        let auth;
        let userId = null;
        let isAuthReady = false;
        let currentWeekStart = new Date('10/27/2025'); // Start on the hardcoded Monday to show seed data

        // --- Initial Data Seed (Only runs if the collection is empty) ---
        const INITIAL_EVENTS = [
            { date: '10/27/2025', time: '9:30am', caseName: '946 Bushwick LLC v. Laura Lynch', caseNumber: '328933/24', county: 'Kings County', part: 'Part A', notes: 'adjourned for tenantâ€™s counsel to file an amended answer by 10/13/25', isHome: true },
            { date: '10/27/2025', time: '9:30am', caseName: '1746 Parkview, LLC v. Sade Solomon', caseNumber: '319750/25', county: 'Bronx County', part: 'Part G', notes: 'for tenant to seek counsel', isHome: false },
            { date: '10/28/2025', time: '9:30am', caseName: '1115 Ocean v. Lenore and Murray Mizrahi', caseNumber: '313003/25', county: 'Unknown', part: 'Part T', notes: 'answer to be filed by 9/17/25', isHome: false },
            { date: '10/29/2025', time: '9:30am', caseName: '946 Bushwick Avenue LLC v. Walter Moreno', caseNumber: '305603/25', county: 'Kings County', part: 'Part T', notes: 'adjourned from prior stipulation', isHome: true },
            { date: '10/30/2025', time: '9:30am', caseName: '202 East 91 LLC v. Ryan Williams', caseNumber: '304764/25', county: 'Kings County', part: 'Part E, room 504', notes: 'do we want to pursue a money judgment?', isHome: false },
            { date: '10/31/2025', time: '9:30am', caseName: 'Clarendon Gardens, LLC v. Karen Meusa', caseNumber: '310160/25', county: 'Kings County', part: 'Part D', notes: 'first time on after intake', isHome: true },
        ];

        // --- Firebase Initialization and Auth ---
        async function initializeFirebase() {
            try {
                // Check if Firebase config is available
                if (Object.keys(firebaseConfig).length === 0) {
                    console.error("Firebase config is missing. Please check the FIREBASE_CONFIG_PLACEHOLDER.");
                    document.getElementById('status-message').textContent = 'System Error: Firebase configuration missing.';
                    return;
                }

                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                    } else {
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                            userId = auth.currentUser.uid;
                        } else {
                            await signInAnonymously(auth);
                            userId = auth.currentUser.uid;
                        }
                    }
                    document.getElementById('user-id').textContent = userId;
                    isAuthReady = true;
                    await seedInitialData(); 
                    setupRealtimeListener(); 
                    updateWeekDisplay(); // Initial display update
                });

            } catch (error) {
                console.error("Firebase Initialization or Auth Error:", error);
                document.getElementById('status-message').textContent = 'System Error: Firebase initialization failed.';
            }
        }

        function getCollectionPath() {
            return `artifacts/${appId}/public/data/court_schedule`;
        }

        async function seedInitialData() {
            // Seeding logic remains the same: ensure data exists initially
            const collectionRef = collection(db, getCollectionPath());
            const documents = await getDocs(collectionRef);
            if (documents.empty) {
                const batch = [];
                INITIAL_EVENTS.forEach((eventData) => {
                    const docRef = doc(collectionRef);
                    batch.push(setDoc(docRef, { ...eventData, id: docRef.id, createdBy: userId, createdAt: Date.now() }));
                });
                try {
                    await Promise.all(batch);
                } catch (e) {
                    console.error("Error during initial data seeding:", e);
                }
            }
        }
        
        // Store all events globally to allow local filtering for week/month view
        let allEvents = []; 

        // --- Firestore Real-time Listener ---
        function setupRealtimeListener() {
            if (!isAuthReady || !db) return;

            const eventsRef = collection(db, getCollectionPath());
            const q = query(eventsRef);

            onSnapshot(q, (snapshot) => {
                const events = [];
                snapshot.forEach((doc) => {
                    events.push(doc.data());
                });
                
                // Sort by Date then Time
                const sortedEvents = events.sort((a, b) => {
                    const dateA = new Date(a.date);
                    const dateB = new Date(b.date);
                    if (dateA - dateB !== 0) return dateA - dateB;

                    const timeToMinutes = (timeStr) => {
                        if (!timeStr) return 0;
                        const match = timeStr.match(/(\d{1,2}:\d{2})(am|pm)/i);
                        if (!match) return 0;
                        const [time, period] = match.slice(1);
                        let [hours, minutes] = time.split(':').map(Number);
                        if (period.toLowerCase() === 'pm' && hours !== 12) hours += 12; 
                        else if (period.toLowerCase() === 'am' && hours === 12) hours = 0; 
                        return hours * 60 + minutes;
                    };
                    return timeToMinutes(a.time) - timeToMinutes(b.time);
                });

                allEvents = sortedEvents; // Store all events
                renderCalendar(); // Render based on the current week
            }, (error) => {
                console.error("Firestore Real-time Data Load Error:", error);
                document.getElementById('status-message').textContent = 'Failed to load data.';
            });
        }

        // --- Date Utility Functions ---

        // Sets date to the start of the current week (Monday)
        function getStartOfWeek(date) {
            const d = new Date(date);
            const day = d.getDay(); // 0 (Sunday) to 6 (Saturday)
            // Calculate days to subtract to get to Monday (1)
            const diff = d.getDate() - day + (day === 0 ? -6 : 1); 
            d.setDate(diff);
            d.setHours(0, 0, 0, 0);
            return d;
        }

        function getDisplayDateString(date) {
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }
        
        function getStandardDateString(date) {
            // Returns MM/DD/YYYY
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const year = date.getFullYear();
            return `${month}/${day}/${year}`;
        }

        // --- Navigation and Display Update ---
        window.updateWeekDisplay = function() {
            const weekStart = getStartOfWeek(currentWeekStart);
            const weekEnd = new Date(weekStart);
            weekEnd.setDate(weekStart.getDate() + 4); // End of the work week (Friday)

            const displayStart = getDisplayDateString(weekStart);
            const displayEnd = getDisplayDateString(weekEnd);

            document.getElementById('week-range').textContent = `${displayStart} - ${displayEnd}`;
            renderCalendar();
        }

        window.prevWeek = function() {
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
            updateWeekDisplay();
        }

        window.nextWeek = function() {
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
            updateWeekDisplay();
        }

        // --- Calendar Rendering Function ---
        window.renderCalendar = function() {
            const calendarContainer = document.getElementById('calendar-view');
            calendarContainer.innerHTML = '';
            
            const weekStart = getStartOfWeek(currentWeekStart);
            const dates = [];
            const dateStrings = {}; // Map of MM/DD/YYYY to Date object

            // Generate 5 days (Monday to Friday)
            for (let i = 0; i < 5; i++) {
                const date = new Date(weekStart);
                date.setDate(weekStart.getDate() + i);
                dates.push(date);
                dateStrings[getStandardDateString(date)] = date;
            }

            // Filter and group events for the current week
            const eventsByDate = allEvents.reduce((acc, event) => {
                const eventDateKey = event.date; // MM/DD/YYYY format from Firestore
                if (dateStrings[eventDateKey]) {
                    if (!acc[eventDateKey]) acc[eventDateKey] = [];
                    acc[eventDateKey].push(event);
                }
                return acc;
            }, {});

            const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
            
            dates.forEach((date, index) => {
                const dayName = dayNames[index];
                const standardDateKey = getStandardDateString(date);
                const displayDate = getDisplayDateString(date);
                
                const eventsForDay = eventsByDate[standardDateKey] || [];

                const dayCard = document.createElement('div');
                dayCard.className = 'w-full lg:w-1/5 p-2 flex-shrink-0 lg:flex-shrink'; // Added flex-shrink-0 for horizontal scrolling
                dayCard.innerHTML = `
                    <div class="bg-white rounded-xl shadow-lg h-full flex flex-col transition-shadow hover:shadow-xl border-t-4 border-indigo-600">
                        <div class="p-4 border-b border-gray-100">
                            <h3 class="text-lg font-bold text-gray-800">${dayName}</h3>
                            <p class="text-sm text-indigo-600 font-semibold">${displayDate}</p>
                        </div>
                        <div id="events-${standardDateKey}" class="p-4 space-y-3 flex-grow overflow-y-auto min-h-[150px]">
                            ${eventsForDay.length > 0 ? eventsForDay.map(event => `
                                <div id="event-${event.id}" class="relative p-3 bg-indigo-50 rounded-lg border-l-4 ${event.isHome ? 'border-red-500' : 'border-indigo-500'} shadow-sm">
                                    <div class="flex justify-between items-start">
                                        <p class="text-xs font-semibold text-gray-700">${event.time} | ${event.county}</p>
                                        <button onclick="openEditModal('${event.id}')" class="text-indigo-500 hover:text-indigo-700 text-sm" title="Edit">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 17.032m-11.232 4.47l-.879-1.318a2.5 2.5 0 0 1 .374-3.218l.218-.184m1.44 1.258-2.652 2.652a1.875 1.875 0 1 0 2.652 2.652l2.652-2.652Z" />
                                            </svg>
                                        </button>
                                    </div>
                                    <p class="font-bold text-sm text-gray-900 mt-1">${event.caseName}</p>
                                    <p class="text-xs text-gray-500 truncate">${event.part} (${event.caseNumber})</p>
                                    ${event.isHome ? '<span class="absolute top-1 right-8 text-xs font-bold text-red-500 bg-red-100 px-1 rounded">HOME</span>' : ''}
                                    ${event.notes ? `<p class="text-xs italic text-gray-600 mt-1">Note: ${event.notes}</p>` : ''}
                                </div>
                            `).join('') : '<p class="text-gray-400 text-sm text-center pt-5">No events scheduled.</p>'}
                        </div>
                    </div>
                `;
                calendarContainer.appendChild(dayCard);
            });
            document.getElementById('status-message').textContent = 'Data updated successfully.';
        }

        // --- Modal Management (Simplified openEditModal) ---
        const modal = document.getElementById('event-modal');
        const modalTitle = document.getElementById('modal-title');
        const eventForm = document.getElementById('event-form');
        let currentEditingEventId = null;

        window.openAddModal = function(initialDate) {
            modalTitle.textContent = 'Add New Event';
            eventForm.reset();
            // Set initial date to the Monday of the current displayed week
            const startOfWeek = getStartOfWeek(currentWeekStart);
            document.getElementById('event-date').value = startOfWeek.toISOString().substring(0, 10); 
            document.getElementById('delete-button').classList.add('hidden');
            currentEditingEventId = null;
            modal.classList.remove('hidden');
        }

        window.openEditModal = function(id) {
            const eventsRef = collection(db, getCollectionPath());
            const docRef = doc(eventsRef, id);

            getDoc(docRef).then(docSnap => {
                if (docSnap.exists()) {
                    const event = docSnap.data();
                    modalTitle.textContent = 'Edit / Delete Event';
                    
                    const [month, day, year] = event.date.split('/');
                    const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
                    
                    document.getElementById('event-date').value = formattedDate;
                    document.getElementById('event-time').value = event.time;
                    document.getElementById('case-name').value = event.caseName;
                    document.getElementById('case-number').value = event.caseNumber;
                    document.getElementById('county').value = event.county;
                    document.getElementById('part').value = event.part;
                    document.getElementById('notes').value = event.notes;
                    document.getElementById('is-home').checked = event.isHome;
                    
                    document.getElementById('delete-button').classList.remove('hidden');
                    currentEditingEventId = id;
                    modal.classList.remove('hidden');
                } else {
                    console.error("Document to edit not found.");
                }
            }).catch(error => {
                console.error("Error fetching document:", error);
            });
        }

        window.closeModal = function() {
            modal.classList.add('hidden');
        }
        
        // --- Save Event Function ---
        eventForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(eventForm);
            const dateInput = formData.get('date'); // YYYY-MM-DD
            const [year, month, day] = dateInput.split('-');
            const standardDate = `${month}/${day}/${year}`; // MM/DD/YYYY (Storage format)

            const eventData = {
                date: standardDate,
                time: formData.get('time'),
                caseName: formData.get('case-name'),
                caseNumber: formData.get('case-number'),
                county: formData.get('county'),
                part: formData.get('part'),
                notes: formData.get('notes'),
                isHome: formData.get('is-home') === 'on',
                updatedAt: Date.now(),
                createdBy: userId 
            };

            const collectionRef = collection(db, getCollectionPath());
            
            try {
                if (currentEditingEventId) {
                    const docRef = doc(collectionRef, currentEditingEventId);
                    await setDoc(docRef, eventData, { merge: true });
                    document.getElementById('status-message').textContent = 'Event updated successfully.';
                } else {
                    const docRef = doc(collectionRef);
                    await setDoc(docRef, { ...eventData, id: docRef.id, createdAt: Date.now() });
                    document.getElementById('status-message').textContent = 'New event added successfully.';
                }
                closeModal();
            } catch (error) {
                console.error("Error saving event:", error);
                document.getElementById('status-message').textContent = 'Failed to save event.';
            }
        });

        // --- Delete Event Function ---
        window.deleteEvent = async function() {
            if (!currentEditingEventId || !confirm('Are you sure you want to delete this event?')) return;
            
            const collectionRef = collection(db, getCollectionPath());
            const docRef = doc(collectionRef, currentEditingEventId);
            
            try {
                await deleteDoc(docRef);
                document.getElementById('status-message').textContent = 'Event deleted successfully.';
                closeModal();
            } catch (error) {
                console.error("Error deleting event:", error);
                document.getElementById('status-message').textContent = 'Failed to delete event.';
            }
        }
        
        // Start application
        window.onload = initializeFirebase;

    </script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f4f7f9;
        }
        .calendar-container {
            display: flex;
            flex-wrap: nowrap;
            overflow-x: auto; 
            min-height: 50vh;
            padding-bottom: 1rem;
        }
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.6);
        }
        .calendar-container::-webkit-scrollbar {
            height: 8px;
        }
        .calendar-container::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }
        @media (min-width: 1024px) {
            /* Enable wrapping on desktop */
            .calendar-container {
                flex-wrap: wrap; 
                overflow-x: hidden;
            }
        }
    </style>
</head>
<body class="min-h-screen">

    <div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
        <header class="bg-white p-6 rounded-xl shadow-md mb-8">
            <h1 class="text-3xl font-extrabold text-gray-900 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8 mr-3 text-indigo-600">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 3v2.25M17.25 3v2.25M3 18.75V7.5a2.25 2.25 0 0 1 2.25-2.25h13.5A2.25 2.25 0 0 1 21 7.5v11.25m-18 0A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75m-18 0v-7.5A2.25 2.25 0 0 1 5.25 9h13.5A2.25 2.25 0 0 1 21 11.25v7.5m-9-6h3.75m-3.75 3h3.75" />
                </svg>
                Collaborative Court Schedule Manager
            </h1>
            <p class="text-gray-500 mt-1">Real-Time Shared Weekly Schedule System</p>

            <!-- Navigation and Controls -->
            <div class="mt-4 flex flex-col md:flex-row justify-between items-center space-y-3 md:space-y-0">
                
                <!-- Week Navigation -->
                <div class="flex items-center space-x-2 bg-gray-100 p-2 rounded-lg w-full md:w-auto">
                    <button onclick="prevWeek()" class="p-1 rounded-full text-indigo-600 hover:bg-gray-200" title="Previous Week">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" /></svg>
                    </button>
                    <span id="week-range" class="font-bold text-gray-800 text-sm w-36 text-center">Loading...</span>
                    <button onclick="nextWeek()" class="p-1 rounded-full text-indigo-600 hover:bg-gray-200" title="Next Week">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" /></svg>
                    </button>
                </div>

                <!-- Add Event Button -->
                <button onclick="openAddModal()" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-colors w-full md:w-auto flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-5 h-5 mr-2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                    </svg>
                    Add New Event
                </button>
                
                <!-- User ID -->
                <div class="text-sm text-gray-500 bg-gray-50 p-2 rounded-lg w-full md:w-auto text-center">
                    User ID (Sharing Key): <span id="user-id" class="font-mono font-bold text-indigo-700">Loading...</span>
                </div>
            </div>
            <p id="status-message" class="mt-3 text-sm text-green-600 font-medium"></p>
        </header>

        <!-- Weekly Calendar View -->
        <div id="calendar-view" class="calendar-container flex space-x-4 lg:space-x-0 lg:space-y-4">
            <!-- Dynamic Daily Cards will be rendered here -->
        </div>
        
    </div>

    <!-- Event Add/Edit Modal -->
    <div id="event-modal" class="modal-overlay fixed inset-0 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-lg mx-auto p-6 relative">
            <h2 id="modal-title" class="text-2xl font-bold text-gray-900 mb-4">Add New Event</h2>
            <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600" title="Close">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            
            <form id="event-form" class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="event-date" class="block text-sm font-medium text-gray-700">Date</label>
                        <input type="date" id="event-date" name="date" required class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                    <div>
                        <label for="event-time" class="block text-sm font-medium text-gray-700">Time (e.g., 9:30am)</label>
                        <input type="text" id="event-time" name="time" required placeholder="9:30am" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                </div>

                <div>
                    <label for="case-name" class="block text-sm font-medium text-gray-700">Case Name (e.g., 946 Bushwick v. Lynch)</label>
                    <input type="text" id="case-name" name="case-name" required class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label for="case-number" class="block text-sm font-medium text-gray-700">Case Number</label>
                        <input type="text" id="case-number" name="case-number" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                    <div>
                        <label for="county" class="block text-sm font-medium text-gray-700">Court/County</label>
                        <input type="text" id="county" name="county" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                    </div>
                </div>
                
                <div>
                    <label for="part" class="block text-sm font-medium text-gray-700">Part / Room</label>
                    <input type="text" id="part" name="part" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border">
                </div>

                <div>
                    <label for="notes" class="block text-sm font-medium text-gray-700">Notes/Details (e.g., next date, special instructions)</label>
                    <textarea id="notes" name="notes" rows="2" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border"></textarea>
                </div>

                <div class="flex items-center">
                    <input id="is-home" name="is-home" type="checkbox" class="h-4 w-4 text-red-600 border-gray-300 rounded focus:ring-red-500">
                    <label for="is-home" class="ml-2 block text-sm font-medium text-gray-700">Work from Home / No Appearance (HOME)</label>
                </div>

                <div class="flex justify-between mt-6">
                    <button type="button" onclick="deleteEvent()" id="delete-button" class="hidden bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-colors">
                        Delete
                    </button>
                    <button type="submit" class="ml-auto bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-colors">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</body>
</html>
